// Generated by using torchexport::export() -> do not edit by hand
#pragma once

#ifdef _WIN32
#ifndef IGNITE_HEADERS_ONLY
#define IGNITE_API extern "C" __declspec(dllexport)
#else
#define IGNITE_API extern "C" __declspec(dllimport)
#endif
#else
#define IGNITE_API extern "C"
#endif

#ifndef IGNITE_HANDLE_EXCEPTION
#define IGNITE_HANDLE_EXCEPTION                                  \
catch(const std::exception& ex) {                                  \
  p_ignite_last_error = make_raw::string(ex.what());             \
} catch (std::string& ex) {                                        \
  p_ignite_last_error = make_raw::string(ex);                    \
} catch (...) {                                                    \
  p_ignite_last_error = make_raw::string("Unknown error. ");     \
}
#endif

void host_exception_handler ();
extern void* p_ignite_last_error;
IGNITE_API void* ignite_last_error ();
IGNITE_API void ignite_last_error_clear();

IGNITE_API void* _ignite_sgd (void* params, double lr, double momentum, double dampening, double weight_decay, bool nesterov);
IGNITE_API void _ignite_sgd_step (void* opt);
IGNITE_API void _ignite_sgd_zero_grad (void* opt);
IGNITE_API void* _ignite_run_script_module (void* network, void* loss_fn, void* input, void* target, void* optimizer);
IGNITE_API void* _ignite_forward (void* input, void* weights, void* bias, void* old_h, void* old_cell);
IGNITE_API void* _ignite_backward (void* grad_h, void* grad_cell, void* new_cell, void* input_gate, void* output_gate, void* candidate_cell, void* X, void* gate_weights, void* weights);
IGNITE_API void _delete_optim_sgd (void* x);
IGNITE_API void _delete_graph_function (void* x);
IGNITE_API void _delete_script_module2 (void* x);
IGNITE_API void _delete_stack2 (void* x);

#ifdef RCPP_VERSION
inline void* ignite_sgd (void* params, double lr, double momentum, double dampening, double weight_decay, bool nesterov) {
  auto ret =  _ignite_sgd(params, lr, momentum, dampening, weight_decay, nesterov);
  host_exception_handler();
  return ret;
}
inline void ignite_sgd_step (void* opt) {
   _ignite_sgd_step(opt);
  host_exception_handler();
  
}
inline void ignite_sgd_zero_grad (void* opt) {
   _ignite_sgd_zero_grad(opt);
  host_exception_handler();
  
}
inline void* ignite_run_script_module (void* network, void* loss_fn, void* input, void* target, void* optimizer) {
  auto ret =  _ignite_run_script_module(network, loss_fn, input, target, optimizer);
  host_exception_handler();
  return ret;
}
inline void* ignite_forward (void* input, void* weights, void* bias, void* old_h, void* old_cell) {
  auto ret =  _ignite_forward(input, weights, bias, old_h, old_cell);
  host_exception_handler();
  return ret;
}
inline void* ignite_backward (void* grad_h, void* grad_cell, void* new_cell, void* input_gate, void* output_gate, void* candidate_cell, void* X, void* gate_weights, void* weights) {
  auto ret =  _ignite_backward(grad_h, grad_cell, new_cell, input_gate, output_gate, candidate_cell, X, gate_weights, weights);
  host_exception_handler();
  return ret;
}
inline void delete_optim_sgd (void* x) {
   _delete_optim_sgd(x);
  host_exception_handler();
  
}
inline void delete_graph_function (void* x) {
   _delete_graph_function(x);
  host_exception_handler();
  
}
inline void delete_script_module2 (void* x) {
   _delete_script_module2(x);
  host_exception_handler();
  
}
inline void delete_stack2 (void* x) {
   _delete_stack2(x);
  host_exception_handler();
  
}
#endif // RCPP_VERSION
