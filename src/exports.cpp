// Generated by using torchexport::export() -> do not edit by hand
#include "exports.h"
#define IGNITE_HEADERS_ONLY
#include <ignite/ignite.h>

// [[Rcpp::export]]
ignite::adamw_param_groups rcpp_ignite_adamw_get_param_groups (ignite::optim_adamw groups) {
  return  ignite_adamw_get_param_groups(groups.get());
}
// [[Rcpp::export]]
torch::TensorList rcpp_ignite_optim_get_param_group_params (ignite::optim_param_group group) {
  return  ignite_optim_get_param_group_params(group.get());
}
// [[Rcpp::export]]
ignite::adamw_options rcpp_ignite_adamw_get_param_group_options (ignite::optim_param_group group) {
  return  ignite_adamw_get_param_group_options(group.get());
}
// [[Rcpp::export]]
void rcpp_ignite_adamw_set_param_group_options (ignite::optim_adamw opt, int i, ignite::adamw_options options) {
   ignite_adamw_set_param_group_options(opt.get(), i, options.get());
}
// [[Rcpp::export]]
ignite::adamw_states rcpp_ignite_adamw_get_states (ignite::optim_adamw opt) {
  return  ignite_adamw_get_states(opt.get());
}
// [[Rcpp::export]]
torch::TensorList rcpp_ignite_adamw_get_state (ignite::adamw_state state) {
  return  ignite_adamw_get_state(state.get());
}
// [[Rcpp::export]]
torch::Tensor rcpp_adamw_state_exp_avg (ignite::adamw_state state) {
  return  adamw_state_exp_avg(state.get());
}
// [[Rcpp::export]]
torch::Tensor rcpp_adamw_state_exp_avg_sq (ignite::adamw_state state) {
  return  adamw_state_exp_avg_sq(state.get());
}
// [[Rcpp::export]]
torch::Tensor rcpp_adamw_state_max_exp_avg_sq (ignite::adamw_state state) {
  return  adamw_state_max_exp_avg_sq(state.get());
}
// [[Rcpp::export]]
torch::Tensor rcpp_adamw_state_step (ignite::adamw_state state) {
  return  adamw_state_step(state.get());
}
// [[Rcpp::export]]
torch::TensorList rcpp_ignite_opt_step (Rcpp::XPtr<XPtrTorchScriptModule> network, Rcpp::XPtr<XPtrTorchScriptModule> loss_fn, XPtrTorchStack input, torch::Tensor target, ignite::optim optimizer) {
  return  ignite_opt_step(network.get(), loss_fn.get(), input.get(), target.get(), optimizer.get());
}
// [[Rcpp::export]]
torch::Tensor rcpp_ignite_predict_step (Rcpp::XPtr<XPtrTorchScriptModule> network, XPtrTorchStack input) {
  return  ignite_predict_step(network.get(), input.get());
}
// [[Rcpp::export]]
ignite::optim_adamw rcpp_ignite_adamw (torch::TensorList params, double lr, double beta1, double beta2, double eps, double weight_decay, bool amsgrad) {
  return  ignite_adamw(params.get(), lr, beta1, beta2, eps, weight_decay, amsgrad);
}
// [[Rcpp::export]]
void rcpp_ignite_adamw_step (ignite::optim_adamw opt) {
   ignite_adamw_step(opt.get());
}
// [[Rcpp::export]]
void rcpp_ignite_adamw_zero_grad (ignite::optim_adamw opt) {
   ignite_adamw_zero_grad(opt.get());
}
// [[Rcpp::export]]
void rcpp_delete_optim (void* x) {
   delete_optim(x);
}
// [[Rcpp::export]]
void rcpp_delete_optim_sgd (void* x) {
   delete_optim_sgd(x);
}
// [[Rcpp::export]]
void rcpp_delete_optim_adam (void* x) {
   delete_optim_adam(x);
}
// [[Rcpp::export]]
void rcpp_delete_optim_adamw (void* x) {
   delete_optim_adamw(x);
}
// [[Rcpp::export]]
void rcpp_delete_optim_adagrad (void* x) {
   delete_optim_adagrad(x);
}
// [[Rcpp::export]]
void rcpp_delete_optim_rmsprop (void* x) {
   delete_optim_rmsprop(x);
}
// [[Rcpp::export]]
void rcpp_delete_optim_param_groups (void* x) {
   delete_optim_param_groups(x);
}
// [[Rcpp::export]]
void rcpp_delete_optim_param_group (void* x) {
   delete_optim_param_group(x);
}
// [[Rcpp::export]]
void rcpp_delete_adamw_param_groups (void* x) {
   delete_adamw_param_groups(x);
}
// [[Rcpp::export]]
void rcpp_delete_adamw_param_group (void* x) {
   delete_adamw_param_group(x);
}
// [[Rcpp::export]]
void rcpp_delete_adamw_states (void* x) {
   delete_adamw_states(x);
}
// [[Rcpp::export]]
void rcpp_delete_adamw_state (void* x) {
   delete_adamw_state(x);
}
// [[Rcpp::export]]
void rcpp_delete_adamw_options (void* x) {
   delete_adamw_options(x);
}
